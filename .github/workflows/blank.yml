import boto3
import json
import logging

s3_client = boto3.client('s3')

def lambda_handler(event, context)
    bucket_name = event['bucket_name']
    file_key = event['file_key']
    
    try
        response = s3_client.get_object(Bucket=bucket_name, Key=file_key)
        data = response['Body'].read().decode('utf-8')
        contacts = json.loads(data)
        
        return {
            'statusCode':---200,
            'body':---contacts
        }
    except Exception as e
        logging.error(f"Error fetching file from S3:{str(e)}")
        return {
            'statusCode':500,
            'body':f"Error fetching file from S3:{str(e)}"
        }
import requests
import json
import os
import logging

ACTON_BASE_URL = "https://restapi.actonsoftware.com"
CLIENT_ID = os.getenv('ACTON_CLIENT_ID')
CLIENT_SECRET = os.getenv('ACTON_CLIENT_SECRET')

def get_auth_token()
    url = f"{ACTON_BASE_URL}/auth"
    response = requests.post(url, data={
        'clientId':CLIENT_ID,
        'clientSecret':CLIENT_SECRET
    })
    response.raise_for_status()
    return response.json()['token']

def upsert_contact(contact)
    token = get_auth_token()
    url = f"{ACTON_BASE_URL}/contacts"
    headers = {
        'Authorization':f"Bearer {token}",
        'Content-Type':'application/json'
    }
    response = requests.post(url, json=contact, headers=headers)
    response.raise_for_status()
    return response.json()

def lambda_handler(event, context)
    contacts = event['contacts']
    results = []
    
    try
        for contact in contacts
            result = upsert_contact(contact)
            results.append(result)
        
        return {
            'statusCode':200,
            'body':results
        }
    except Exception as e
        logging.error(f"Error upserting contacts: {str(e)}")
        return {
            'statusCode': 500,
            'body': f"Error upserting contacts: {str(e)}"
        }
import requests
import os
import logging

ACTON_BASE_URL = "https://restapi.actonsoftware.com"
CLIENT_ID = os.getenv('ACTON_CLIENT_ID')
CLIENT_SECRET = os.getenv('ACTON_CLIENT_SECRET')

def get_auth_token():
    url = f"{ACTON_BASE_URL}/auth"
    response = requests.post(url, data={
        'clientId': CLIENT_ID,
        'clientSecret': CLIENT_SECRET
    })
    response.raise_for_status()
    return response.json()['token']

def add_to_dss(contact_id, dss_id):
    token = get_auth_token()
    url = f"{ACTON_BASE_URL}/dss/{dss_id}/contacts"
    headers = {
        'Authorization': f"Bearer {token}",
        'Content-Type': 'application/json'
    }
    response = requests.post(url, json={'contactId': contact_id}, headers=headers)
    response.raise_for_status()
    return response.json()

def lambda_handler(event, context):
    contact_ids = event['contact_ids']
    dss_id = event['dss_id']
    results = []
    
    try:
        for contact_id in contact_ids:
            result = add_to_dss(contact_id, dss_id)
            results.append(result)
        
        return {
            'statusCode': 200,
            'body': results
        }
    except Exception as e:
        logging.error(f"Error adding contacts to DSS: {str(e)}")
        return {
            'statusCode': 500,
            'body': f"Error adding contacts to DSS: {str(e)}"
        }
{
  "Comment": "AWS Act-On Integration Workflow",
  "StartAt": "FetchMarketingList",
  "States": {
    "FetchMarketingList": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:REGION:ACCOUNT_ID:function:fetch_marketing_list",
      "Next": "UpsertContacts"
    },
    "UpsertContacts": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:REGION:ACCOUNT_ID:function:upsert_contacts_acton",
      "Next": "AddToDSS"
    },
    "AddToDSS": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:REGION:ACCOUNT_ID:function:add_to_dss",
      "End": true
    }
  }
}
zip fetch_marketing_list.zip fetch_marketing_list.py
zip upsert_contacts_acton.zip upsert_contacts_acton.py
zip add_to_dss.zip add_to_dss.py

aws lambda create-function --function-name fetch_marketing_list \
    --runtime python3.9 --handler fetch_marketing_list.lambda_handler \
    --role arn:aws:iam::ACCOUNT_ID:role/LambdaRole \
    --zip-file fileb://fetch_marketing_list.zip

aws lambda create-function --function-name upsert_contacts_acton \
    --runtime python3.9 --handler upsert_contacts_acton.lambda_handler \
    --role arn:aws:iam::ACCOUNT_ID:role/LambdaRole \
    --zip-file fileb://upsert_contacts_acton.zip

aws lambda create-function --function-name add_to_dss \
    --runtime python3.9 --handler add_to_dss.lambda_handler \
    --role arn:aws:iam::ACCOUNT_ID:role/LambdaRole \
    --zip-file fileb://add_to_dss.zip
aws stepfunctions create-state-machine --name "ActOnIntegrationWorkflow" \
    --definition file://step_functions_workflow.json \
    --role-arn arn:aws:iam::ACCOUNT_ID:role/StepFunctionsRole
aws stepfunctions start-execution --state-machine-arn arn:aws:states:REGION:ACCOUNT_ID:stateMachine:ActOnIntegrationWorkflow \
    --input '{"bucket_name": "my-bucket", "file_key": "marketing-list.json", "dss_id": "12345"}'
